I implemented procedural terrain generation with two distinct biomes: rolling grassland hills and jagged mountains.

I first wrote a noise generator class that stores all the noise function that I
In the noise generator class, I implemented a full 3D gradient-based Perlin noise algorithm using a permutation table of 512 values initialized with a seed. 
Implemented proper gradient selection using the hash of coordinates. I also implemented an FBM noise by layering multiple octaves of Perlin noise. I also implement a Voronoi noise for organic looking like terrain in grasslands. 
By incorporating these noise functions, I wrote a class called biome generator that generates height field for different biomes. For the grassland biome, I used Voronoi noise for organic hill shape and added perlin noise at double
frequency for small scale details. I combined the results (following the method described in the paper) to generate rolling hills like grasslands. For the moutain biome, I used 6 octaves for more detailed mountain features and transformed
the standard noise into ridged noise with 1.0f - std::abs(noise) that we learned in lecture. I also applied a power function at the end to control the ridge sharpness. Finally, I used a biome interpolation function that used very low frequency 
to create large scale biome region and remapped perlin noise from [-1, 1] to [0, 1], applied smooth step function to create more defined biome boundaries while maintaining smooth transitions.

I then wrote a function called generateTerrain in the Terrain class that loops over the relevant chunks and for each (x,z) in the chunk-space it computes the grassland height, the mountain height, the interpolation t from the third noise function,
use lerp to find the final height and fill blocks in the right range applying the correct block types for that biome. And replace any empty cells between y 128 and 138 with water. 


I think a major challenge for me was noise parameter tuning. Like when I choose scales and octaves for the perlin and voronoi noise to generate a good looking hills and rugged mountains, 
if the freq was too high or too low, the terrain would look either really noisy or really smooth. So I just starting with small test regions and experimented with different frequency and 
amplitude values, I kinda just visually debugged it to make it look good eventually. For blending the biomes smoothly, I first just averaging the two biome heigh fields, it looks really bad, 
I then used a large scale peeling noise to interpolate the two biome height values and to smooth out the transitions, I used a smooothstep function that avoid the harsh edges. 
